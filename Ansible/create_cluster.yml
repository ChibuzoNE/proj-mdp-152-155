---
- name: Create Kubernetes cluster with KOPS
  hosts: k8s_workers
  become: yes
  strategy: free
  vars_files:
    - group_vars/all.yml
  vars:
    local_ssh_key: "my-instance.pem"
    local_ssh_pub: "id_rsa.pub"
    kops_version: "1.28.0"
    kops_download_path: "/usr/local/bin/kops"

  tasks:
    - name: Ensure proper SSH key pair exists and usable remotely
      block:
        - name: Convert PEM to private/public SSH keys on control node
          delegate_to: localhost
          run_once: true
          shell: |
            openssl rsa -in "{{ local_ssh_key }}" -out /tmp/id_rsa
            chmod 600 /tmp/id_rsa
            ssh-keygen -y -f /tmp/id_rsa > /tmp/id_rsa.pub
            chmod 644 /tmp/id_rsa.pub
          args:
            executable: /bin/bash

        - name: Copy SSH private key to remote nodes
          copy:
            src: /tmp/id_rsa
            dest: /root/.ssh/id_rsa
            owner: root
            group: root
            mode: '0600'

        - name: Copy SSH public key to remote nodes
          copy:
            src: /tmp/id_rsa.pub
            dest: /root/.ssh/id_rsa.pub
            owner: root
            group: root
            mode: '0644'

        - name: Verify public key format on remote nodes
          command: ssh-keygen -l -f /root/.ssh/id_rsa.pub
          register: key_verify
          changed_when: false

      rescue:
        - name: Clean up on failure
          file:
            path: /root/.ssh/id_rsa
            state: absent
          ignore_errors: yes

        - name: Fail if key conversion unsuccessful
          fail:
            msg: "Failed to convert and validate SSH keys. Check your PEM file."
          when: key_verify.rc != 0

    - name: Install required packages
      package:
        name:
          - curl
          - unzip
          - python3-pip
        state: present
      async: 300
      poll: 15

    - name: Install AWS CLI via pip
      pip:
        name: awscli
        state: present
      when: ansible_python.version.major == 3

    - name: Download and install KOPS
      block:
        - name: Download KOPS binary
          get_url:
            url: "https://github.com/kubernetes/kops/releases/download/v{{ kops_version }}/kops-linux-amd64"
            dest: /tmp/kops
            mode: '0755'
            timeout: 60
          register: download_result
          until: download_result is succeeded
          retries: 3
          delay: 10

        - name: Install KOPS
          copy:
            src: /tmp/kops
            dest: "{{ kops_download_path }}"
            remote_src: yes
            mode: '0755'
            owner: root
            group: root

      rescue:
        - name: Clean up on failure
          file:
            path: /tmp/kops
            state: absent
          ignore_errors: yes

    - name: Configure cluster (run once)
      delegate_to: "{{ groups['k8s_workers'][0] }}"
      run_once: yes
      shell: |
        set -o pipefail
        export KOPS_STATE_STORE={{ state_store }}
        {{ kops_download_path }} create cluster \
          --name={{ cluster_name }} \
          --zones={{ zones|join(',') }} \
          --node-count={{ node_count }} \
          --control-plane-size={{ master_size }} \
          --ssh-public-key=/root/.ssh/id_rsa.pub \
          --yes 2>&1 | tee /tmp/kops_create.log
      environment:
        AWS_DEFAULT_REGION: "{{ aws_region }}"

    - name: Wait for cluster validation
      delegate_to: "{{ groups['k8s_workers'][0] }}"
      run_once: yes
      command: "{{ kops_download_path }} validate cluster --wait 10m --name {{ cluster_name }}"
      register: validation
      until: validation.rc == 0
      retries: 10
      delay: 30
